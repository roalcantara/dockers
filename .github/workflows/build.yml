name: Build

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize

env:
  CI: true
  FORCE_COLOR: true
  DOCKER_BUILDKIT: 1
  BUILDKIT_INLINE_CACHE: 1

defaults:
  run:
    shell: bash

jobs:
  build:
    environment: dev
    runs-on: ubuntu-latest
    strategy:
      matrix:
        context: [lua/5.1, remark/cli]
    steps:
    - id: image
      run: |
        echo "dockerfile=${CONTEXT}/Dockerfile" >> $GITHUB_OUTPUT
        echo "cst_config=${CONTEXT}/config-cst.yml" >> $GITHUB_OUTPUT
        echo "name=${CONTEXT//\//_}" >> $GITHUB_OUTPUT
        echo "full_name=${{ github.actor }}/${CONTEXT//\//_}" >> $GITHUB_OUTPUT
        echo "latest=${{ github.actor }}/${CONTEXT//\//_}:latest" >> $GITHUB_OUTPUT
        echo "ghcr=ghcr.io/${{ github.actor }}/${CONTEXT//\//_}" >> $GITHUB_OUTPUT
        echo "gh_latest=ghcr.io/${{ github.actor }}/${CONTEXT//\//_}:latest" >> $GITHUB_OUTPUT
      env:
        CONTEXT: ${{ matrix.context }}
    - uses: actions/checkout@v3
    - name: Hadolint GitHub action, A Dockerfile linting tool
      uses: hadolint/hadolint-action@v3.0.0
      with:
        config: .hadolint.yml
        dockerfile: ${{ steps.image.outputs.dockerfile }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    - name: Extract metadata (tags, labels) from Git reference and GitHub events for Docker
      uses: docker/metadata-action@v4
      id: meta
      with:
        images: ${{ steps.image.outputs.ghcr }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        flavor: latest=true
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
    - name: Build to ghcr cst validation
      uses: docker/build-push-action@v4
      with:
        push: false
        load: true
        context: ${{ matrix.context }}
        file: ${{ steps.image.outputs.dockerfile }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
    - name: Scan your Docker container image for vulnerabilities
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: ${{ steps.image.outputs.gh_latest }}
        format: sarif
        exit-code: 1
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'MEDIUM,HIGH,CRITICAL'
        output: trivy-results.sarif
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy-results.sarif
    - name: Run Container Structure Test
      uses: docker://gcr.io/gcp-runtimes/container-structure-test:latest
      with:
        args: test -v debug --force --output junit --test-report cst_junit_report.xml --config ${{ steps.image.outputs.cst_config }} --image ${{ steps.image.outputs.gh_latest }}
    - name: Display CST Report
      uses: mikepenz/action-junit-report@v3
      if: always()
      with:
        report_paths: cst_junit_report.xml
        github_token: ${{ secrets.GITHUB_TOKEN }}
